// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Models;

namespace server.Migrations
{
    [DbContext(typeof(EmployeeDirectoryContext))]
    partial class EmployeeDirectoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("server.Models.LocationCompany", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ManagerWorkerNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CompanyCode")
                        .HasName("pkLocationCompany");

                    b.HasIndex("ManagerWorkerNumber");

                    b.ToTable("LocationCompany");
                });

            modelBuilder.Entity("server.Models.LocationGroup", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ManagerWorkerNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CompanyCode", "OfficeCode", "GroupCode")
                        .HasName("pkLocationGroup");

                    b.HasIndex("ManagerWorkerNumber");

                    b.ToTable("LocationGroup");
                });

            modelBuilder.Entity("server.Models.LocationOffice", b =>
                {
                    b.Property<string>("CompanyCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ManagerWorkerNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CompanyCode", "OfficeCode")
                        .HasName("pkLocationOffice");

                    b.HasIndex("ManagerWorkerNumber");

                    b.ToTable("LocationOffice");
                });

            modelBuilder.Entity("server.Models.LocationPhysical", b =>
                {
                    b.Property<string>("PhysicalLocationId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SortValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PhysicalLocationId")
                        .HasName("pkLocationPhysical");

                    b.ToTable("LocationPhysical");
                });

            modelBuilder.Entity("server.Models.Skill", b =>
                {
                    b.Property<string>("SkillCategoryId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SkillId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SortValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SkillCategoryId", "SkillId")
                        .HasName("pkSkill");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("server.Models.SkillCategory", b =>
                {
                    b.Property<string>("SkillCategoryId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SortValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SkillCategoryId");

                    b.ToTable("SkillCategory");
                });

            modelBuilder.Entity("server.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("UserId")
                        .HasName("pkUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("server.Models.Worker", b =>
                {
                    b.Property<string>("WorkerNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhysicalLocationId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupervisorWorkerNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("WorkCell")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<decimal?>("YearsPriorExperience")
                        .HasColumnType("numeric(3,1)");

                    b.HasKey("WorkerNumber")
                        .HasName("pkWorker");

                    b.HasIndex("PhysicalLocationId");

                    b.HasIndex("SupervisorWorkerNumber");

                    b.HasIndex("CompanyCode", "OfficeCode", "GroupCode");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("server.Models.WorkerSkill", b =>
                {
                    b.Property<string>("WorkerNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SkillCategoryId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SkillId")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("WorkerNumber", "SkillCategoryId", "SkillId")
                        .HasName("pkWorkerSkill");

                    b.HasIndex("SkillCategoryId", "SkillId");

                    b.ToTable("WorkerSkill");
                });

            modelBuilder.Entity("server.Models.LocationCompany", b =>
                {
                    b.HasOne("server.Models.Worker", "ManagerWorker")
                        .WithMany("LocationCompanies")
                        .HasForeignKey("ManagerWorkerNumber")
                        .HasConstraintName("fkManagerCompany")
                        .IsRequired();

                    b.Navigation("ManagerWorker");
                });

            modelBuilder.Entity("server.Models.LocationGroup", b =>
                {
                    b.HasOne("server.Models.Worker", "ManagerWorker")
                        .WithMany("LocationGroups")
                        .HasForeignKey("ManagerWorkerNumber")
                        .HasConstraintName("fkManagerGroup")
                        .IsRequired();

                    b.HasOne("server.Models.LocationOffice", "LocationOffice")
                        .WithMany("LocationGroups")
                        .HasForeignKey("CompanyCode", "OfficeCode")
                        .HasConstraintName("fkOfficeGroup")
                        .IsRequired();

                    b.Navigation("LocationOffice");

                    b.Navigation("ManagerWorker");
                });

            modelBuilder.Entity("server.Models.LocationOffice", b =>
                {
                    b.HasOne("server.Models.LocationCompany", "LocationCompany")
                        .WithMany("LocationOffices")
                        .HasForeignKey("CompanyCode")
                        .HasConstraintName("fkCompanyOffice")
                        .IsRequired();

                    b.HasOne("server.Models.Worker", "ManagerWorker")
                        .WithMany("LocationOffices")
                        .HasForeignKey("ManagerWorkerNumber")
                        .HasConstraintName("fkManagerOffice")
                        .IsRequired();

                    b.Navigation("LocationCompany");

                    b.Navigation("ManagerWorker");
                });

            modelBuilder.Entity("server.Models.Skill", b =>
                {
                    b.HasOne("server.Models.SkillCategory", "SkillCategory")
                        .WithMany("Skills")
                        .HasForeignKey("SkillCategoryId")
                        .HasConstraintName("fkSkillCategorySkill")
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("server.Models.Worker", b =>
                {
                    b.HasOne("server.Models.LocationPhysical", "PhysicalLocation")
                        .WithMany("Workers")
                        .HasForeignKey("PhysicalLocationId")
                        .HasConstraintName("fkPhysicalLocationWorker")
                        .IsRequired();

                    b.HasOne("server.Models.Worker", "SupervisorWorker")
                        .WithMany("InverseSupervisorWorkerNumberNavigation")
                        .HasForeignKey("SupervisorWorkerNumber")
                        .HasConstraintName("fkSupervisorWorker")
                        .IsRequired();

                    b.HasOne("server.Models.LocationGroup", "LocationGroup")
                        .WithMany("Workers")
                        .HasForeignKey("CompanyCode", "OfficeCode", "GroupCode")
                        .HasConstraintName("fkGroupWorker")
                        .IsRequired();

                    b.Navigation("LocationGroup");

                    b.Navigation("PhysicalLocation");

                    b.Navigation("SupervisorWorker");
                });

            modelBuilder.Entity("server.Models.WorkerSkill", b =>
                {
                    b.HasOne("server.Models.Worker", "Worker")
                        .WithMany("WorkerSkills")
                        .HasForeignKey("WorkerNumber")
                        .HasConstraintName("fkWorkerWorkerSkill")
                        .IsRequired();

                    b.HasOne("server.Models.Skill", "Skill")
                        .WithMany("WorkerSkills")
                        .HasForeignKey("SkillCategoryId", "SkillId")
                        .HasConstraintName("fkSkillWorkerSkill")
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("server.Models.LocationCompany", b =>
                {
                    b.Navigation("LocationOffices");
                });

            modelBuilder.Entity("server.Models.LocationGroup", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("server.Models.LocationOffice", b =>
                {
                    b.Navigation("LocationGroups");
                });

            modelBuilder.Entity("server.Models.LocationPhysical", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("server.Models.Skill", b =>
                {
                    b.Navigation("WorkerSkills");
                });

            modelBuilder.Entity("server.Models.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("server.Models.Worker", b =>
                {
                    b.Navigation("InverseSupervisorWorkerNumberNavigation");

                    b.Navigation("LocationCompanies");

                    b.Navigation("LocationGroups");

                    b.Navigation("LocationOffices");

                    b.Navigation("WorkerSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
